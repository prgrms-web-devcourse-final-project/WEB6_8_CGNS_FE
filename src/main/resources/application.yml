# 서버 설정 (개발용)
server:
  port: 8080
  error:
    include-stacktrace: always # 에러 스택트레이스 포함 (개발용)

spring:
  profiles:
    default: dev
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration # Redis 없어도 실행 가능하도록 변경
      - org.springframework.boot.autoconfigure.session.SessionAutoConfiguration # Redis 없어도 실행 가능하도록 변경
  config:
    import: 
      - "optional:file:.env[.properties]"
      - "classpath:region-codes.yml"

  # Spring AI 1.0.0-M6 설정 (OpenRouter 사용)
  ai:
    openai:
      base-url: https://openrouter.ai/api
      api-key: ${OPENROUTER_API_KEY}
      chat:
        options:
          model: ${OPENROUTER_MODEL}
          temperature: 0.7

  # 개발용 H2 Database 설정 (주니어 개발자용)
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: ""

  h2:
    console:
      enabled: true # http://localhost:8080/h2-console에서 DB 확인 가능
      path: /h2-console
      settings:
        web-allow-others: true # 팀원들이 다른 PC에서도 접근 가능

  jpa:
    hibernate:
      ddl-auto: create-drop # 개발용: 서버 재시작시 DB 초기화
    show-sql: true # SQL 로그 출력 (디버깅용)
    properties:
      hibernate:
        format_sql: true
        highlight_sql: true
        use_sql_comments: true
        default_batch_fetch_size: 100
      open-in-view: false

  sql:
    init:
      mode: never  # prod에서는 Hibernate가 스키마 관리

  # WebSocket 설정 (Guest-Guide 채팅용)
  websocket:
    allowed-origins: "http://localhost:3000,http://localhost:3001,http://localhost:8080"

  # 개발 도구 활성화
  devtools:
    livereload:
      enabled: true
    restart:
      enabled: true

  # Redis 설정 (캐싱 및 세션 저장소)
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: 0
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

  # 세션 관리 (개발용: none, 운영용: redis)
  session:
    store-type: none  # Redis 없어도 실행 가능하도록 변경
    timeout: 30m
  # Redis 자동 설정 비활성화 (세션 비활성화용)
#  autoconfigure: #이거 설정하면 운영 환경에서 레디스 세션 작동 안됨
#    exclude:
#      - org.springframework.boot.autoconfigure.session.SessionAutoConfiguration

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - profile
              - email
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope:
              - name
              - email
              - profile_image
            client-name: Naver
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope:
              - profile_nickname
              - profile_image
            client-name: Kakao
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
# Swagger API 문서 설정 (주니어 개발자용)
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    display-request-duration: true
    operations-sorter: method

# Weather API 설정
weather:
  api:
    key: ${WEATHER__API__KEY}
    base-url: https://apihub.kma.go.kr/api/typ02/openApi/MidFcstInfoService

# Tour API 설정
tour:
  api:
    key: ${TOUR_API_KEY:dev-tour-api-key-placeholder}
    base-url: ${TOUR_API_BASE_URL:http://apis.data.go.kr/B551011/KorService1}


# 로깅 설정 (주니어 개발자 디버깅용)
logging:
  level:
    root: INFO
    org.springframework.ai: DEBUG
    org.springframework.web: DEBUG
    org.springframework.security: DEBUG
    com.back: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# 관리 엔드포인트 (개발/디버깅용)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env,beans
  endpoint:
    health:
      probes:
        enabled: true
      show-details: never

custom:
  dev:
    cookieDomain: localhost
    frontUrl: "http://${custom.dev.cookieDomain}:3000"
    backUrl: "http://${custom.dev.cookieDomain}:${server.port}"
  prod:
    cookieDomain: team11.giwon11292.com
    frontUrl: "https://www.${custom.prod.cookieDomain}"
    backUrl: "https://api.${custom.prod.cookieDomain}"
  site:
    cookieDomain: "${custom.dev.cookieDomain}"
    frontUrl: "${custom.dev.frontUrl}"
    backUrl: "${custom.dev.backUrl}"
    name: team11

# JWT 설정
jwt:
  secret-key: ${CUSTOM__JWT__SECRET_KEY:dev-secret-key-for-local-testing-please-change}
  access-token-expiration-minutes: ${JWT_ACCESS_TOKEN_EXPIRATION_MINUTES:60}
  refresh-token-expiration-days: ${JWT_REFRESH_TOKEN_EXPIRATION_DAYS:7}